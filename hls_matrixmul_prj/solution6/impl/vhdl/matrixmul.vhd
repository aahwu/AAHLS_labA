-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_0_ce0 : OUT STD_LOGIC;
    a_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_0_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_0_ce1 : OUT STD_LOGIC;
    a_0_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_1_ce0 : OUT STD_LOGIC;
    a_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_1_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_1_ce1 : OUT STD_LOGIC;
    a_1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_2_ce0 : OUT STD_LOGIC;
    a_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_2_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    a_2_ce1 : OUT STD_LOGIC;
    a_2_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_0_ce0 : OUT STD_LOGIC;
    b_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_0_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_0_ce1 : OUT STD_LOGIC;
    b_0_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_1_ce0 : OUT STD_LOGIC;
    b_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_1_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_1_ce1 : OUT STD_LOGIC;
    b_1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_2_ce0 : OUT STD_LOGIC;
    b_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_2_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_2_ce1 : OUT STD_LOGIC;
    b_2_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    res_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce1 : OUT STD_LOGIC;
    res_we1 : OUT STD_LOGIC;
    res_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul_matrixmul,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.682000,HLS_SYN_LAT=8,HLS_SYN_TPT=5,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=463,HLS_SYN_LUT=816,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv16_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal reg_358 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal reg_362 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_366 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln62_fu_370_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_reg_724 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_1_fu_374_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_1_reg_729 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln62_fu_378_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln62_reg_735 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_2_fu_384_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_2_reg_740 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_3_fu_388_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_3_reg_747 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_4_fu_392_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_4_reg_754 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_5_fu_396_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_5_reg_761 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_6_fu_400_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_6_reg_768 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln62_3_fu_404_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln62_3_reg_774 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_7_fu_410_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_7_reg_779 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_8_fu_414_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_8_reg_786 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_9_fu_418_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_9_reg_823 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln62_6_fu_422_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln62_6_reg_829 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_10_fu_427_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_10_reg_834 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_11_fu_431_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_11_reg_841 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_12_fu_435_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_12_reg_848 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln62_9_fu_439_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln62_9_reg_854 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_13_fu_444_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_13_reg_859 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_14_fu_448_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_14_reg_866 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln62_12_fu_452_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln62_12_reg_873 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal mul_ln62_15_fu_456_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln62_15_reg_878 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_15_fu_470_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_15_reg_883 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal mul_ln62_18_fu_474_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln62_18_reg_888 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_16_fu_479_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_16_reg_893 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_17_fu_483_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln62_17_reg_900 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln62_21_fu_487_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln62_21_reg_907 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln62_24_fu_502_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln62_24_reg_912 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal add_ln62_2_fu_460_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln62_2_fu_460_p2 : signal is "no";
    signal add_ln62_5_fu_465_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln62_5_fu_465_p2 : signal is "no";
    signal add_ln62_8_fu_492_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln62_8_fu_492_p2 : signal is "no";
    signal add_ln62_11_fu_497_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln62_11_fu_497_p2 : signal is "no";
    signal add_ln62_14_fu_506_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln62_14_fu_506_p2 : signal is "no";
    signal add_ln62_17_fu_511_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln62_17_fu_511_p2 : signal is "no";
    signal add_ln62_20_fu_516_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln62_20_fu_516_p2 : signal is "no";
    signal add_ln62_23_fu_521_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln62_23_fu_521_p2 : signal is "no";
    signal add_ln62_26_fu_526_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln62_26_fu_526_p2 : signal is "no";
    signal mul_ln62_fu_378_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln62_3_fu_404_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln62_6_fu_422_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln62_9_fu_439_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln62_12_fu_452_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln62_12_fu_452_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln62_15_fu_456_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln62_15_fu_456_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln62_2_fu_460_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_539_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_531_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln62_5_fu_465_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_556_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_548_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln62_18_fu_474_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln62_18_fu_474_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln62_21_fu_487_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln62_21_fu_487_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln62_8_fu_492_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_572_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_565_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln62_11_fu_497_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_587_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_580_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln62_24_fu_502_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln62_24_fu_502_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln62_14_fu_506_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_601_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_595_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln62_17_fu_511_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_614_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_608_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln62_20_fu_516_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_628_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_621_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln62_23_fu_521_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_643_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_636_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln62_26_fu_526_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_657_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_651_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_531_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_539_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_539_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_548_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_556_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_556_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_565_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_572_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_572_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_580_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_587_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_587_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_595_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_595_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_601_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_601_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_601_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_608_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_608_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_614_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_614_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_614_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_621_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_621_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_628_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_628_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_628_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_636_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_636_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_643_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_643_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_643_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_651_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_651_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_657_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_657_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_657_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component matrixmul_mul_8s_8s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrixmul_mac_muladd_8s_8s_16s_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrixmul_mac_muladd_8s_8s_2ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    mul_8s_8s_16_1_1_U1 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => b_0_q1,
        din1 => mul_ln62_fu_378_p1,
        dout => mul_ln62_fu_378_p2);

    mul_8s_8s_16_1_1_U2 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => b_0_q0,
        din1 => mul_ln62_3_fu_404_p1,
        dout => mul_ln62_3_fu_404_p2);

    mul_8s_8s_16_1_1_U3 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => b_0_q0,
        din1 => mul_ln62_6_fu_422_p1,
        dout => mul_ln62_6_fu_422_p2);

    mul_8s_8s_16_1_1_U4 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => reg_358,
        din1 => mul_ln62_9_fu_439_p1,
        dout => mul_ln62_9_fu_439_p2);

    mul_8s_8s_16_1_1_U5 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln62_12_fu_452_p0,
        din1 => mul_ln62_12_fu_452_p1,
        dout => mul_ln62_12_fu_452_p2);

    mul_8s_8s_16_1_1_U6 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln62_15_fu_456_p0,
        din1 => mul_ln62_15_fu_456_p1,
        dout => mul_ln62_15_fu_456_p2);

    mul_8s_8s_16_1_1_U7 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln62_18_fu_474_p0,
        din1 => mul_ln62_18_fu_474_p1,
        dout => mul_ln62_18_fu_474_p2);

    mul_8s_8s_16_1_1_U8 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln62_21_fu_487_p0,
        din1 => mul_ln62_21_fu_487_p1,
        dout => mul_ln62_21_fu_487_p2);

    mul_8s_8s_16_1_1_U9 : component matrixmul_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln62_24_fu_502_p0,
        din1 => mul_ln62_24_fu_502_p1,
        dout => mul_ln62_24_fu_502_p2);

    mac_muladd_8s_8s_16s_16_4_1_U10 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_1_q1,
        din1 => grp_fu_531_p1,
        din2 => mul_ln62_reg_735,
        ce => ap_const_logic_1,
        dout => grp_fu_531_p3);

    mac_muladd_8s_8s_2ns_16_4_1_U11 : component matrixmul_mac_muladd_8s_8s_2ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_2_q1,
        din1 => grp_fu_539_p1,
        din2 => grp_fu_539_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_539_p3);

    mac_muladd_8s_8s_16s_16_4_1_U12 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_1_q0,
        din1 => grp_fu_548_p1,
        din2 => mul_ln62_3_reg_774,
        ce => ap_const_logic_1,
        dout => grp_fu_548_p3);

    mac_muladd_8s_8s_2ns_16_4_1_U13 : component matrixmul_mac_muladd_8s_8s_2ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_2_q0,
        din1 => grp_fu_556_p1,
        din2 => grp_fu_556_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_556_p3);

    mac_muladd_8s_8s_16s_16_4_1_U14 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_1_q0,
        din1 => grp_fu_565_p1,
        din2 => mul_ln62_6_reg_829,
        ce => ap_const_logic_1,
        dout => grp_fu_565_p3);

    mac_muladd_8s_8s_2ns_16_4_1_U15 : component matrixmul_mac_muladd_8s_8s_2ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_2_q0,
        din1 => grp_fu_572_p1,
        din2 => grp_fu_572_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_572_p3);

    mac_muladd_8s_8s_16s_16_4_1_U16 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_362,
        din1 => grp_fu_580_p1,
        din2 => mul_ln62_9_reg_854,
        ce => ap_const_logic_1,
        dout => grp_fu_580_p3);

    mac_muladd_8s_8s_2ns_16_4_1_U17 : component matrixmul_mac_muladd_8s_8s_2ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_366,
        din1 => grp_fu_587_p1,
        din2 => grp_fu_587_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_587_p3);

    mac_muladd_8s_8s_16s_16_4_1_U18 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_595_p0,
        din1 => grp_fu_595_p1,
        din2 => mul_ln62_12_reg_873,
        ce => ap_const_logic_1,
        dout => grp_fu_595_p3);

    mac_muladd_8s_8s_2ns_16_4_1_U19 : component matrixmul_mac_muladd_8s_8s_2ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_601_p0,
        din1 => grp_fu_601_p1,
        din2 => grp_fu_601_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_601_p3);

    mac_muladd_8s_8s_16s_16_4_1_U20 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_608_p0,
        din1 => grp_fu_608_p1,
        din2 => mul_ln62_15_reg_878,
        ce => ap_const_logic_1,
        dout => grp_fu_608_p3);

    mac_muladd_8s_8s_2ns_16_4_1_U21 : component matrixmul_mac_muladd_8s_8s_2ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_614_p0,
        din1 => grp_fu_614_p1,
        din2 => grp_fu_614_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_614_p3);

    mac_muladd_8s_8s_16s_16_4_1_U22 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_621_p0,
        din1 => grp_fu_621_p1,
        din2 => mul_ln62_18_reg_888,
        ce => ap_const_logic_1,
        dout => grp_fu_621_p3);

    mac_muladd_8s_8s_2ns_16_4_1_U23 : component matrixmul_mac_muladd_8s_8s_2ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_628_p0,
        din1 => grp_fu_628_p1,
        din2 => grp_fu_628_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_628_p3);

    mac_muladd_8s_8s_16s_16_4_1_U24 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_636_p0,
        din1 => grp_fu_636_p1,
        din2 => mul_ln62_21_reg_907,
        ce => ap_const_logic_1,
        dout => grp_fu_636_p3);

    mac_muladd_8s_8s_2ns_16_4_1_U25 : component matrixmul_mac_muladd_8s_8s_2ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_643_p0,
        din1 => grp_fu_643_p1,
        din2 => grp_fu_643_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_643_p3);

    mac_muladd_8s_8s_16s_16_4_1_U26 : component matrixmul_mac_muladd_8s_8s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_651_p0,
        din1 => grp_fu_651_p1,
        din2 => mul_ln62_24_reg_912,
        ce => ap_const_logic_1,
        dout => grp_fu_651_p3);

    mac_muladd_8s_8s_2ns_16_4_1_U27 : component matrixmul_mac_muladd_8s_8s_2ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_657_p0,
        din1 => grp_fu_657_p1,
        din2 => grp_fu_657_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_657_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                mul_ln62_12_reg_873 <= mul_ln62_12_fu_452_p2;
                mul_ln62_15_reg_878 <= mul_ln62_15_fu_456_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                mul_ln62_18_reg_888 <= mul_ln62_18_fu_474_p2;
                mul_ln62_21_reg_907 <= mul_ln62_21_fu_487_p2;
                sext_ln62_15_reg_883 <= sext_ln62_15_fu_470_p1;
                sext_ln62_16_reg_893 <= sext_ln62_16_fu_479_p1;
                sext_ln62_17_reg_900 <= sext_ln62_17_fu_483_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln62_24_reg_912 <= mul_ln62_24_fu_502_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_ln62_3_reg_774 <= mul_ln62_3_fu_404_p2;
                mul_ln62_reg_735 <= mul_ln62_fu_378_p2;
                sext_ln62_1_reg_729 <= sext_ln62_1_fu_374_p1;
                sext_ln62_2_reg_740 <= sext_ln62_2_fu_384_p1;
                sext_ln62_3_reg_747 <= sext_ln62_3_fu_388_p1;
                sext_ln62_4_reg_754 <= sext_ln62_4_fu_392_p1;
                sext_ln62_5_reg_761 <= sext_ln62_5_fu_396_p1;
                sext_ln62_6_reg_768 <= sext_ln62_6_fu_400_p1;
                sext_ln62_7_reg_779 <= sext_ln62_7_fu_410_p1;
                sext_ln62_8_reg_786 <= sext_ln62_8_fu_414_p1;
                sext_ln62_reg_724 <= sext_ln62_fu_370_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul_ln62_6_reg_829 <= mul_ln62_6_fu_422_p2;
                mul_ln62_9_reg_854 <= mul_ln62_9_fu_439_p2;
                sext_ln62_10_reg_834 <= sext_ln62_10_fu_427_p1;
                sext_ln62_11_reg_841 <= sext_ln62_11_fu_431_p1;
                sext_ln62_12_reg_848 <= sext_ln62_12_fu_435_p1;
                sext_ln62_13_reg_859 <= sext_ln62_13_fu_444_p1;
                sext_ln62_14_reg_866 <= sext_ln62_14_fu_448_p1;
                sext_ln62_9_reg_823 <= sext_ln62_9_fu_418_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_358 <= a_0_q0;
                reg_362 <= a_1_q0;
                reg_366 <= a_2_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage4_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_idle_pp0_1to1 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if (((ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    a_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                a_0_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                a_0_address0 <= ap_const_lv64_1(2 - 1 downto 0);
            else 
                a_0_address0 <= "XX";
            end if;
        else 
            a_0_address0 <= "XX";
        end if; 
    end process;

    a_0_address1 <= ap_const_lv64_0(2 - 1 downto 0);

    a_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            a_0_ce0 <= ap_const_logic_1;
        else 
            a_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_0_ce1 <= ap_const_logic_1;
        else 
            a_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    a_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                a_1_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                a_1_address0 <= ap_const_lv64_1(2 - 1 downto 0);
            else 
                a_1_address0 <= "XX";
            end if;
        else 
            a_1_address0 <= "XX";
        end if; 
    end process;

    a_1_address1 <= ap_const_lv64_0(2 - 1 downto 0);

    a_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            a_1_ce0 <= ap_const_logic_1;
        else 
            a_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_1_ce1 <= ap_const_logic_1;
        else 
            a_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    a_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                a_2_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                a_2_address0 <= ap_const_lv64_1(2 - 1 downto 0);
            else 
                a_2_address0 <= "XX";
            end if;
        else 
            a_2_address0 <= "XX";
        end if; 
    end process;

    a_2_address1 <= ap_const_lv64_0(2 - 1 downto 0);

    a_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            a_2_ce0 <= ap_const_logic_1;
        else 
            a_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_2_ce1 <= ap_const_logic_1;
        else 
            a_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln62_11_fu_497_p0 <= grp_fu_587_p3;
    add_ln62_11_fu_497_p2 <= std_logic_vector(signed(add_ln62_11_fu_497_p0) + signed(grp_fu_580_p3));
    add_ln62_14_fu_506_p0 <= grp_fu_601_p3;
    add_ln62_14_fu_506_p2 <= std_logic_vector(signed(add_ln62_14_fu_506_p0) + signed(grp_fu_595_p3));
    add_ln62_17_fu_511_p0 <= grp_fu_614_p3;
    add_ln62_17_fu_511_p2 <= std_logic_vector(signed(add_ln62_17_fu_511_p0) + signed(grp_fu_608_p3));
    add_ln62_20_fu_516_p0 <= grp_fu_628_p3;
    add_ln62_20_fu_516_p2 <= std_logic_vector(signed(add_ln62_20_fu_516_p0) + signed(grp_fu_621_p3));
    add_ln62_23_fu_521_p0 <= grp_fu_643_p3;
    add_ln62_23_fu_521_p2 <= std_logic_vector(signed(add_ln62_23_fu_521_p0) + signed(grp_fu_636_p3));
    add_ln62_26_fu_526_p0 <= grp_fu_657_p3;
    add_ln62_26_fu_526_p2 <= std_logic_vector(signed(add_ln62_26_fu_526_p0) + signed(grp_fu_651_p3));
    add_ln62_2_fu_460_p0 <= grp_fu_539_p3;
    add_ln62_2_fu_460_p2 <= std_logic_vector(signed(add_ln62_2_fu_460_p0) + signed(grp_fu_531_p3));
    add_ln62_5_fu_465_p0 <= grp_fu_556_p3;
    add_ln62_5_fu_465_p2 <= std_logic_vector(signed(add_ln62_5_fu_465_p0) + signed(grp_fu_548_p3));
    add_ln62_8_fu_492_p0 <= grp_fu_572_p3;
    add_ln62_8_fu_492_p2 <= std_logic_vector(signed(add_ln62_8_fu_492_p0) + signed(grp_fu_565_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    b_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                b_0_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                b_0_address0 <= ap_const_lv64_1(2 - 1 downto 0);
            else 
                b_0_address0 <= "XX";
            end if;
        else 
            b_0_address0 <= "XX";
        end if; 
    end process;

    b_0_address1 <= ap_const_lv64_0(2 - 1 downto 0);

    b_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            b_0_ce0 <= ap_const_logic_1;
        else 
            b_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_0_ce1 <= ap_const_logic_1;
        else 
            b_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                b_1_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                b_1_address0 <= ap_const_lv64_1(2 - 1 downto 0);
            else 
                b_1_address0 <= "XX";
            end if;
        else 
            b_1_address0 <= "XX";
        end if; 
    end process;

    b_1_address1 <= ap_const_lv64_0(2 - 1 downto 0);

    b_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            b_1_ce0 <= ap_const_logic_1;
        else 
            b_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_1_ce1 <= ap_const_logic_1;
        else 
            b_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                b_2_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                b_2_address0 <= ap_const_lv64_1(2 - 1 downto 0);
            else 
                b_2_address0 <= "XX";
            end if;
        else 
            b_2_address0 <= "XX";
        end if; 
    end process;

    b_2_address1 <= ap_const_lv64_0(2 - 1 downto 0);

    b_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            b_2_ce0 <= ap_const_logic_1;
        else 
            b_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_2_ce1 <= ap_const_logic_1;
        else 
            b_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_531_p1 <= sext_ln62_2_fu_384_p1(8 - 1 downto 0);
    grp_fu_539_p1 <= sext_ln62_4_fu_392_p1(8 - 1 downto 0);
    grp_fu_539_p2 <= ap_const_lv16_3(2 - 1 downto 0);
    grp_fu_548_p1 <= sext_ln62_2_fu_384_p1(8 - 1 downto 0);
    grp_fu_556_p1 <= sext_ln62_4_fu_392_p1(8 - 1 downto 0);
    grp_fu_556_p2 <= ap_const_lv16_3(2 - 1 downto 0);
    grp_fu_565_p1 <= sext_ln62_2_reg_740(8 - 1 downto 0);
    grp_fu_572_p1 <= sext_ln62_4_reg_754(8 - 1 downto 0);
    grp_fu_572_p2 <= ap_const_lv16_3(2 - 1 downto 0);
    grp_fu_580_p1 <= sext_ln62_3_reg_747(8 - 1 downto 0);
    grp_fu_587_p1 <= sext_ln62_5_reg_761(8 - 1 downto 0);
    grp_fu_587_p2 <= ap_const_lv16_3(2 - 1 downto 0);
    grp_fu_595_p0 <= sext_ln62_13_reg_859(8 - 1 downto 0);
    grp_fu_595_p1 <= sext_ln62_7_reg_779(8 - 1 downto 0);
    grp_fu_601_p0 <= sext_ln62_14_reg_866(8 - 1 downto 0);
    grp_fu_601_p1 <= sext_ln62_8_reg_786(8 - 1 downto 0);
    grp_fu_601_p2 <= ap_const_lv16_3(2 - 1 downto 0);
    grp_fu_608_p0 <= sext_ln62_13_reg_859(8 - 1 downto 0);
    grp_fu_608_p1 <= sext_ln62_10_reg_834(8 - 1 downto 0);
    grp_fu_614_p0 <= sext_ln62_14_reg_866(8 - 1 downto 0);
    grp_fu_614_p1 <= sext_ln62_11_reg_841(8 - 1 downto 0);
    grp_fu_614_p2 <= ap_const_lv16_3(2 - 1 downto 0);
    grp_fu_621_p0 <= sext_ln62_16_fu_479_p1(8 - 1 downto 0);
    grp_fu_621_p1 <= sext_ln62_3_reg_747(8 - 1 downto 0);
    grp_fu_628_p0 <= sext_ln62_17_fu_483_p1(8 - 1 downto 0);
    grp_fu_628_p1 <= sext_ln62_5_reg_761(8 - 1 downto 0);
    grp_fu_628_p2 <= ap_const_lv16_3(2 - 1 downto 0);
    grp_fu_636_p0 <= sext_ln62_16_fu_479_p1(8 - 1 downto 0);
    grp_fu_636_p1 <= sext_ln62_7_reg_779(8 - 1 downto 0);
    grp_fu_643_p0 <= sext_ln62_17_fu_483_p1(8 - 1 downto 0);
    grp_fu_643_p1 <= sext_ln62_8_reg_786(8 - 1 downto 0);
    grp_fu_643_p2 <= ap_const_lv16_3(2 - 1 downto 0);
    grp_fu_651_p0 <= sext_ln62_16_reg_893(8 - 1 downto 0);
    grp_fu_651_p1 <= sext_ln62_10_reg_834(8 - 1 downto 0);
    grp_fu_657_p0 <= sext_ln62_17_reg_900(8 - 1 downto 0);
    grp_fu_657_p1 <= sext_ln62_11_reg_841(8 - 1 downto 0);
    grp_fu_657_p2 <= ap_const_lv16_3(2 - 1 downto 0);
    mul_ln62_12_fu_452_p0 <= sext_ln62_12_reg_848(8 - 1 downto 0);
    mul_ln62_12_fu_452_p1 <= sext_ln62_6_reg_768(8 - 1 downto 0);
    mul_ln62_15_fu_456_p0 <= sext_ln62_12_reg_848(8 - 1 downto 0);
    mul_ln62_15_fu_456_p1 <= sext_ln62_9_reg_823(8 - 1 downto 0);
    mul_ln62_18_fu_474_p0 <= sext_ln62_15_fu_470_p1(8 - 1 downto 0);
    mul_ln62_18_fu_474_p1 <= sext_ln62_1_reg_729(8 - 1 downto 0);
    mul_ln62_21_fu_487_p0 <= sext_ln62_15_fu_470_p1(8 - 1 downto 0);
    mul_ln62_21_fu_487_p1 <= sext_ln62_6_reg_768(8 - 1 downto 0);
    mul_ln62_24_fu_502_p0 <= sext_ln62_15_reg_883(8 - 1 downto 0);
    mul_ln62_24_fu_502_p1 <= sext_ln62_9_reg_823(8 - 1 downto 0);
    mul_ln62_3_fu_404_p1 <= sext_ln62_fu_370_p1(8 - 1 downto 0);
    mul_ln62_6_fu_422_p1 <= sext_ln62_reg_724(8 - 1 downto 0);
    mul_ln62_9_fu_439_p1 <= sext_ln62_1_reg_729(8 - 1 downto 0);
    mul_ln62_fu_378_p1 <= sext_ln62_fu_370_p1(8 - 1 downto 0);

    res_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage4, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            res_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            res_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            res_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            res_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            res_address0 <= "XXXX";
        end if; 
    end process;


    res_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage4, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            res_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            res_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            res_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            res_address1 <= "XXXX";
        end if; 
    end process;


    res_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            res_ce0 <= ap_const_logic_1;
        else 
            res_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    res_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            res_ce1 <= ap_const_logic_1;
        else 
            res_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    res_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage4, ap_block_pp0_stage2, ap_block_pp0_stage3, add_ln62_2_fu_460_p2, add_ln62_11_fu_497_p2, add_ln62_17_fu_511_p2, add_ln62_23_fu_521_p2, add_ln62_26_fu_526_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            res_d0 <= add_ln62_26_fu_526_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            res_d0 <= add_ln62_23_fu_521_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            res_d0 <= add_ln62_17_fu_511_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_d0 <= add_ln62_11_fu_497_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            res_d0 <= add_ln62_2_fu_460_p2;
        else 
            res_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    res_d1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage4, ap_block_pp0_stage2, add_ln62_5_fu_465_p2, add_ln62_8_fu_492_p2, add_ln62_14_fu_506_p2, add_ln62_20_fu_516_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            res_d1 <= add_ln62_20_fu_516_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            res_d1 <= add_ln62_14_fu_506_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_d1 <= add_ln62_8_fu_492_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            res_d1 <= add_ln62_5_fu_465_p2;
        else 
            res_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    res_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            res_we0 <= ap_const_logic_1;
        else 
            res_we0 <= ap_const_logic_0;
        end if; 
    end process;


    res_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            res_we1 <= ap_const_logic_1;
        else 
            res_we1 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln62_10_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_1_q0),16));

        sext_ln62_11_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_2_q0),16));

        sext_ln62_12_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_358),16));

        sext_ln62_13_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_362),16));

        sext_ln62_14_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_366),16));

        sext_ln62_15_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_358),16));

        sext_ln62_16_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_362),16));

        sext_ln62_17_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_366),16));

        sext_ln62_1_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_0_q1),16));

        sext_ln62_2_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_1_q1),16));

        sext_ln62_3_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_1_q1),16));

        sext_ln62_4_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_2_q1),16));

        sext_ln62_5_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_2_q1),16));

        sext_ln62_6_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_0_q0),16));

        sext_ln62_7_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_1_q0),16));

        sext_ln62_8_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_2_q0),16));

        sext_ln62_9_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_0_q0),16));

        sext_ln62_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_0_q1),16));

end behav;
