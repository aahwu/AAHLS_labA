// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul_matrixmul,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.682000,HLS_SYN_LAT=8,HLS_SYN_TPT=5,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=463,HLS_SYN_LUT=816,HLS_VERSION=2022_1}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_0_address0,
        a_0_ce0,
        a_0_q0,
        a_0_address1,
        a_0_ce1,
        a_0_q1,
        a_1_address0,
        a_1_ce0,
        a_1_q0,
        a_1_address1,
        a_1_ce1,
        a_1_q1,
        a_2_address0,
        a_2_ce0,
        a_2_q0,
        a_2_address1,
        a_2_ce1,
        a_2_q1,
        b_0_address0,
        b_0_ce0,
        b_0_q0,
        b_0_address1,
        b_0_ce1,
        b_0_q1,
        b_1_address0,
        b_1_ce0,
        b_1_q0,
        b_1_address1,
        b_1_ce1,
        b_1_q1,
        b_2_address0,
        b_2_ce0,
        b_2_q0,
        b_2_address1,
        b_2_ce1,
        b_2_q1,
        res_address0,
        res_ce0,
        res_we0,
        res_d0,
        res_address1,
        res_ce1,
        res_we1,
        res_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 5'd1;
parameter    ap_ST_fsm_pp0_stage1 = 5'd2;
parameter    ap_ST_fsm_pp0_stage2 = 5'd4;
parameter    ap_ST_fsm_pp0_stage3 = 5'd8;
parameter    ap_ST_fsm_pp0_stage4 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] a_0_address0;
output   a_0_ce0;
input  [7:0] a_0_q0;
output  [1:0] a_0_address1;
output   a_0_ce1;
input  [7:0] a_0_q1;
output  [1:0] a_1_address0;
output   a_1_ce0;
input  [7:0] a_1_q0;
output  [1:0] a_1_address1;
output   a_1_ce1;
input  [7:0] a_1_q1;
output  [1:0] a_2_address0;
output   a_2_ce0;
input  [7:0] a_2_q0;
output  [1:0] a_2_address1;
output   a_2_ce1;
input  [7:0] a_2_q1;
output  [1:0] b_0_address0;
output   b_0_ce0;
input  [7:0] b_0_q0;
output  [1:0] b_0_address1;
output   b_0_ce1;
input  [7:0] b_0_q1;
output  [1:0] b_1_address0;
output   b_1_ce0;
input  [7:0] b_1_q0;
output  [1:0] b_1_address1;
output   b_1_ce1;
input  [7:0] b_1_q1;
output  [1:0] b_2_address0;
output   b_2_ce0;
input  [7:0] b_2_q0;
output  [1:0] b_2_address1;
output   b_2_ce1;
input  [7:0] b_2_q1;
output  [3:0] res_address0;
output   res_ce0;
output   res_we0;
output  [15:0] res_d0;
output  [3:0] res_address1;
output   res_ce1;
output   res_we1;
output  [15:0] res_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1:0] a_0_address0;
reg a_0_ce0;
reg a_0_ce1;
reg[1:0] a_1_address0;
reg a_1_ce0;
reg a_1_ce1;
reg[1:0] a_2_address0;
reg a_2_ce0;
reg a_2_ce1;
reg[1:0] b_0_address0;
reg b_0_ce0;
reg b_0_ce1;
reg[1:0] b_1_address0;
reg b_1_ce0;
reg b_1_ce1;
reg[1:0] b_2_address0;
reg b_2_ce0;
reg b_2_ce1;
reg[3:0] res_address0;
reg res_ce0;
reg res_we0;
reg[15:0] res_d0;
reg[3:0] res_address1;
reg res_ce1;
reg res_we1;
reg[15:0] res_d1;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_subdone;
reg  signed [7:0] reg_358;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state8_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg  signed [7:0] reg_362;
reg  signed [7:0] reg_366;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire  signed [15:0] sext_ln62_fu_370_p1;
reg  signed [15:0] sext_ln62_reg_724;
wire  signed [15:0] sext_ln62_1_fu_374_p1;
reg  signed [15:0] sext_ln62_1_reg_729;
wire   [15:0] mul_ln62_fu_378_p2;
reg  signed [15:0] mul_ln62_reg_735;
wire  signed [15:0] sext_ln62_2_fu_384_p1;
reg  signed [15:0] sext_ln62_2_reg_740;
wire  signed [15:0] sext_ln62_3_fu_388_p1;
reg  signed [15:0] sext_ln62_3_reg_747;
wire  signed [15:0] sext_ln62_4_fu_392_p1;
reg  signed [15:0] sext_ln62_4_reg_754;
wire  signed [15:0] sext_ln62_5_fu_396_p1;
reg  signed [15:0] sext_ln62_5_reg_761;
wire  signed [15:0] sext_ln62_6_fu_400_p1;
reg  signed [15:0] sext_ln62_6_reg_768;
wire   [15:0] mul_ln62_3_fu_404_p2;
reg  signed [15:0] mul_ln62_3_reg_774;
wire  signed [15:0] sext_ln62_7_fu_410_p1;
reg  signed [15:0] sext_ln62_7_reg_779;
wire  signed [15:0] sext_ln62_8_fu_414_p1;
reg  signed [15:0] sext_ln62_8_reg_786;
wire  signed [15:0] sext_ln62_9_fu_418_p1;
reg  signed [15:0] sext_ln62_9_reg_823;
wire   [15:0] mul_ln62_6_fu_422_p2;
reg  signed [15:0] mul_ln62_6_reg_829;
wire  signed [15:0] sext_ln62_10_fu_427_p1;
reg  signed [15:0] sext_ln62_10_reg_834;
wire  signed [15:0] sext_ln62_11_fu_431_p1;
reg  signed [15:0] sext_ln62_11_reg_841;
wire  signed [15:0] sext_ln62_12_fu_435_p1;
reg  signed [15:0] sext_ln62_12_reg_848;
wire   [15:0] mul_ln62_9_fu_439_p2;
reg  signed [15:0] mul_ln62_9_reg_854;
wire  signed [15:0] sext_ln62_13_fu_444_p1;
reg  signed [15:0] sext_ln62_13_reg_859;
wire  signed [15:0] sext_ln62_14_fu_448_p1;
reg  signed [15:0] sext_ln62_14_reg_866;
wire   [15:0] mul_ln62_12_fu_452_p2;
reg  signed [15:0] mul_ln62_12_reg_873;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state9_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire   [15:0] mul_ln62_15_fu_456_p2;
reg  signed [15:0] mul_ln62_15_reg_878;
wire  signed [15:0] sext_ln62_15_fu_470_p1;
reg  signed [15:0] sext_ln62_15_reg_883;
wire    ap_block_pp0_stage4_11001;
wire   [15:0] mul_ln62_18_fu_474_p2;
reg  signed [15:0] mul_ln62_18_reg_888;
wire  signed [15:0] sext_ln62_16_fu_479_p1;
reg  signed [15:0] sext_ln62_16_reg_893;
wire  signed [15:0] sext_ln62_17_fu_483_p1;
reg  signed [15:0] sext_ln62_17_reg_900;
wire   [15:0] mul_ln62_21_fu_487_p2;
reg  signed [15:0] mul_ln62_21_reg_907;
wire   [15:0] mul_ln62_24_fu_502_p2;
reg  signed [15:0] mul_ln62_24_reg_912;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
(* use_dsp48 = "no" *) wire   [15:0] add_ln62_2_fu_460_p2;
(* use_dsp48 = "no" *) wire   [15:0] add_ln62_5_fu_465_p2;
(* use_dsp48 = "no" *) wire   [15:0] add_ln62_8_fu_492_p2;
(* use_dsp48 = "no" *) wire   [15:0] add_ln62_11_fu_497_p2;
(* use_dsp48 = "no" *) wire   [15:0] add_ln62_14_fu_506_p2;
(* use_dsp48 = "no" *) wire   [15:0] add_ln62_17_fu_511_p2;
(* use_dsp48 = "no" *) wire   [15:0] add_ln62_20_fu_516_p2;
(* use_dsp48 = "no" *) wire   [15:0] add_ln62_23_fu_521_p2;
(* use_dsp48 = "no" *) wire   [15:0] add_ln62_26_fu_526_p2;
wire  signed [7:0] mul_ln62_fu_378_p1;
wire  signed [7:0] mul_ln62_3_fu_404_p1;
wire  signed [7:0] mul_ln62_6_fu_422_p1;
wire  signed [7:0] mul_ln62_9_fu_439_p1;
wire  signed [7:0] mul_ln62_12_fu_452_p0;
wire  signed [7:0] mul_ln62_12_fu_452_p1;
wire  signed [7:0] mul_ln62_15_fu_456_p0;
wire  signed [7:0] mul_ln62_15_fu_456_p1;
wire  signed [15:0] add_ln62_2_fu_460_p0;
wire   [15:0] grp_fu_539_p3;
wire  signed [15:0] grp_fu_531_p3;
wire  signed [15:0] add_ln62_5_fu_465_p0;
wire   [15:0] grp_fu_556_p3;
wire  signed [15:0] grp_fu_548_p3;
wire  signed [7:0] mul_ln62_18_fu_474_p0;
wire  signed [7:0] mul_ln62_18_fu_474_p1;
wire  signed [7:0] mul_ln62_21_fu_487_p0;
wire  signed [7:0] mul_ln62_21_fu_487_p1;
wire  signed [15:0] add_ln62_8_fu_492_p0;
wire   [15:0] grp_fu_572_p3;
wire  signed [15:0] grp_fu_565_p3;
wire  signed [15:0] add_ln62_11_fu_497_p0;
wire   [15:0] grp_fu_587_p3;
wire  signed [15:0] grp_fu_580_p3;
wire  signed [7:0] mul_ln62_24_fu_502_p0;
wire  signed [7:0] mul_ln62_24_fu_502_p1;
wire  signed [15:0] add_ln62_14_fu_506_p0;
wire   [15:0] grp_fu_601_p3;
wire  signed [15:0] grp_fu_595_p3;
wire  signed [15:0] add_ln62_17_fu_511_p0;
wire   [15:0] grp_fu_614_p3;
wire  signed [15:0] grp_fu_608_p3;
wire  signed [15:0] add_ln62_20_fu_516_p0;
wire   [15:0] grp_fu_628_p3;
wire  signed [15:0] grp_fu_621_p3;
wire  signed [15:0] add_ln62_23_fu_521_p0;
wire   [15:0] grp_fu_643_p3;
wire  signed [15:0] grp_fu_636_p3;
wire  signed [15:0] add_ln62_26_fu_526_p0;
wire   [15:0] grp_fu_657_p3;
wire  signed [15:0] grp_fu_651_p3;
wire  signed [7:0] grp_fu_531_p1;
wire  signed [7:0] grp_fu_539_p1;
wire   [1:0] grp_fu_539_p2;
wire  signed [7:0] grp_fu_548_p1;
wire  signed [7:0] grp_fu_556_p1;
wire   [1:0] grp_fu_556_p2;
wire  signed [7:0] grp_fu_565_p1;
wire  signed [7:0] grp_fu_572_p1;
wire   [1:0] grp_fu_572_p2;
wire  signed [7:0] grp_fu_580_p1;
wire  signed [7:0] grp_fu_587_p1;
wire   [1:0] grp_fu_587_p2;
wire  signed [7:0] grp_fu_595_p0;
wire  signed [7:0] grp_fu_595_p1;
wire  signed [7:0] grp_fu_601_p0;
wire  signed [7:0] grp_fu_601_p1;
wire   [1:0] grp_fu_601_p2;
wire  signed [7:0] grp_fu_608_p0;
wire  signed [7:0] grp_fu_608_p1;
wire  signed [7:0] grp_fu_614_p0;
wire  signed [7:0] grp_fu_614_p1;
wire   [1:0] grp_fu_614_p2;
wire  signed [7:0] grp_fu_621_p0;
wire  signed [7:0] grp_fu_621_p1;
wire  signed [7:0] grp_fu_628_p0;
wire  signed [7:0] grp_fu_628_p1;
wire   [1:0] grp_fu_628_p2;
wire  signed [7:0] grp_fu_636_p0;
wire  signed [7:0] grp_fu_636_p1;
wire  signed [7:0] grp_fu_643_p0;
wire  signed [7:0] grp_fu_643_p1;
wire   [1:0] grp_fu_643_p2;
wire  signed [7:0] grp_fu_651_p0;
wire  signed [7:0] grp_fu_651_p1;
wire  signed [7:0] grp_fu_657_p0;
wire  signed [7:0] grp_fu_657_p1;
wire   [1:0] grp_fu_657_p2;
reg   [4:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

matrixmul_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U1(
    .din0(b_0_q1),
    .din1(mul_ln62_fu_378_p1),
    .dout(mul_ln62_fu_378_p2)
);

matrixmul_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U2(
    .din0(b_0_q0),
    .din1(mul_ln62_3_fu_404_p1),
    .dout(mul_ln62_3_fu_404_p2)
);

matrixmul_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U3(
    .din0(b_0_q0),
    .din1(mul_ln62_6_fu_422_p1),
    .dout(mul_ln62_6_fu_422_p2)
);

matrixmul_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U4(
    .din0(reg_358),
    .din1(mul_ln62_9_fu_439_p1),
    .dout(mul_ln62_9_fu_439_p2)
);

matrixmul_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U5(
    .din0(mul_ln62_12_fu_452_p0),
    .din1(mul_ln62_12_fu_452_p1),
    .dout(mul_ln62_12_fu_452_p2)
);

matrixmul_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U6(
    .din0(mul_ln62_15_fu_456_p0),
    .din1(mul_ln62_15_fu_456_p1),
    .dout(mul_ln62_15_fu_456_p2)
);

matrixmul_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U7(
    .din0(mul_ln62_18_fu_474_p0),
    .din1(mul_ln62_18_fu_474_p1),
    .dout(mul_ln62_18_fu_474_p2)
);

matrixmul_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U8(
    .din0(mul_ln62_21_fu_487_p0),
    .din1(mul_ln62_21_fu_487_p1),
    .dout(mul_ln62_21_fu_487_p2)
);

matrixmul_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U9(
    .din0(mul_ln62_24_fu_502_p0),
    .din1(mul_ln62_24_fu_502_p1),
    .dout(mul_ln62_24_fu_502_p2)
);

matrixmul_mac_muladd_8s_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16s_16_4_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_1_q1),
    .din1(grp_fu_531_p1),
    .din2(mul_ln62_reg_735),
    .ce(1'b1),
    .dout(grp_fu_531_p3)
);

matrixmul_mac_muladd_8s_8s_2ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_2ns_16_4_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_2_q1),
    .din1(grp_fu_539_p1),
    .din2(grp_fu_539_p2),
    .ce(1'b1),
    .dout(grp_fu_539_p3)
);

matrixmul_mac_muladd_8s_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16s_16_4_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_1_q0),
    .din1(grp_fu_548_p1),
    .din2(mul_ln62_3_reg_774),
    .ce(1'b1),
    .dout(grp_fu_548_p3)
);

matrixmul_mac_muladd_8s_8s_2ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_2ns_16_4_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_2_q0),
    .din1(grp_fu_556_p1),
    .din2(grp_fu_556_p2),
    .ce(1'b1),
    .dout(grp_fu_556_p3)
);

matrixmul_mac_muladd_8s_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16s_16_4_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_1_q0),
    .din1(grp_fu_565_p1),
    .din2(mul_ln62_6_reg_829),
    .ce(1'b1),
    .dout(grp_fu_565_p3)
);

matrixmul_mac_muladd_8s_8s_2ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_2ns_16_4_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_2_q0),
    .din1(grp_fu_572_p1),
    .din2(grp_fu_572_p2),
    .ce(1'b1),
    .dout(grp_fu_572_p3)
);

matrixmul_mac_muladd_8s_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16s_16_4_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_362),
    .din1(grp_fu_580_p1),
    .din2(mul_ln62_9_reg_854),
    .ce(1'b1),
    .dout(grp_fu_580_p3)
);

matrixmul_mac_muladd_8s_8s_2ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_2ns_16_4_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_366),
    .din1(grp_fu_587_p1),
    .din2(grp_fu_587_p2),
    .ce(1'b1),
    .dout(grp_fu_587_p3)
);

matrixmul_mac_muladd_8s_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16s_16_4_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_595_p0),
    .din1(grp_fu_595_p1),
    .din2(mul_ln62_12_reg_873),
    .ce(1'b1),
    .dout(grp_fu_595_p3)
);

matrixmul_mac_muladd_8s_8s_2ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_2ns_16_4_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_601_p0),
    .din1(grp_fu_601_p1),
    .din2(grp_fu_601_p2),
    .ce(1'b1),
    .dout(grp_fu_601_p3)
);

matrixmul_mac_muladd_8s_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16s_16_4_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_608_p0),
    .din1(grp_fu_608_p1),
    .din2(mul_ln62_15_reg_878),
    .ce(1'b1),
    .dout(grp_fu_608_p3)
);

matrixmul_mac_muladd_8s_8s_2ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_2ns_16_4_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_614_p0),
    .din1(grp_fu_614_p1),
    .din2(grp_fu_614_p2),
    .ce(1'b1),
    .dout(grp_fu_614_p3)
);

matrixmul_mac_muladd_8s_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16s_16_4_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_621_p0),
    .din1(grp_fu_621_p1),
    .din2(mul_ln62_18_reg_888),
    .ce(1'b1),
    .dout(grp_fu_621_p3)
);

matrixmul_mac_muladd_8s_8s_2ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_2ns_16_4_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_628_p0),
    .din1(grp_fu_628_p1),
    .din2(grp_fu_628_p2),
    .ce(1'b1),
    .dout(grp_fu_628_p3)
);

matrixmul_mac_muladd_8s_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16s_16_4_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_636_p0),
    .din1(grp_fu_636_p1),
    .din2(mul_ln62_21_reg_907),
    .ce(1'b1),
    .dout(grp_fu_636_p3)
);

matrixmul_mac_muladd_8s_8s_2ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_2ns_16_4_1_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_643_p0),
    .din1(grp_fu_643_p1),
    .din2(grp_fu_643_p2),
    .ce(1'b1),
    .dout(grp_fu_643_p3)
);

matrixmul_mac_muladd_8s_8s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_16s_16_4_1_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_651_p0),
    .din1(grp_fu_651_p1),
    .din2(mul_ln62_24_reg_912),
    .ce(1'b1),
    .dout(grp_fu_651_p3)
);

matrixmul_mac_muladd_8s_8s_2ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mac_muladd_8s_8s_2ns_16_4_1_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_657_p0),
    .din1(grp_fu_657_p1),
    .din2(grp_fu_657_p2),
    .ce(1'b1),
    .dout(grp_fu_657_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        mul_ln62_12_reg_873 <= mul_ln62_12_fu_452_p2;
        mul_ln62_15_reg_878 <= mul_ln62_15_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        mul_ln62_18_reg_888 <= mul_ln62_18_fu_474_p2;
        mul_ln62_21_reg_907 <= mul_ln62_21_fu_487_p2;
        sext_ln62_15_reg_883 <= sext_ln62_15_fu_470_p1;
        sext_ln62_16_reg_893 <= sext_ln62_16_fu_479_p1;
        sext_ln62_17_reg_900 <= sext_ln62_17_fu_483_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_ln62_24_reg_912 <= mul_ln62_24_fu_502_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul_ln62_3_reg_774 <= mul_ln62_3_fu_404_p2;
        mul_ln62_reg_735 <= mul_ln62_fu_378_p2;
        sext_ln62_1_reg_729 <= sext_ln62_1_fu_374_p1;
        sext_ln62_2_reg_740 <= sext_ln62_2_fu_384_p1;
        sext_ln62_3_reg_747 <= sext_ln62_3_fu_388_p1;
        sext_ln62_4_reg_754 <= sext_ln62_4_fu_392_p1;
        sext_ln62_5_reg_761 <= sext_ln62_5_fu_396_p1;
        sext_ln62_6_reg_768 <= sext_ln62_6_fu_400_p1;
        sext_ln62_7_reg_779 <= sext_ln62_7_fu_410_p1;
        sext_ln62_8_reg_786 <= sext_ln62_8_fu_414_p1;
        sext_ln62_reg_724 <= sext_ln62_fu_370_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        mul_ln62_6_reg_829 <= mul_ln62_6_fu_422_p2;
        mul_ln62_9_reg_854 <= mul_ln62_9_fu_439_p2;
        sext_ln62_10_reg_834 <= sext_ln62_10_fu_427_p1;
        sext_ln62_11_reg_841 <= sext_ln62_11_fu_431_p1;
        sext_ln62_12_reg_848 <= sext_ln62_12_fu_435_p1;
        sext_ln62_13_reg_859 <= sext_ln62_13_fu_444_p1;
        sext_ln62_14_reg_866 <= sext_ln62_14_fu_448_p1;
        sext_ln62_9_reg_823 <= sext_ln62_9_fu_418_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_358 <= a_0_q0;
        reg_362 <= a_1_q0;
        reg_366 <= a_2_q0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            a_0_address0 = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            a_0_address0 = 64'd1;
        end else begin
            a_0_address0 = 'bx;
        end
    end else begin
        a_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        a_0_ce0 = 1'b1;
    end else begin
        a_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_0_ce1 = 1'b1;
    end else begin
        a_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            a_1_address0 = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            a_1_address0 = 64'd1;
        end else begin
            a_1_address0 = 'bx;
        end
    end else begin
        a_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        a_1_ce0 = 1'b1;
    end else begin
        a_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_1_ce1 = 1'b1;
    end else begin
        a_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            a_2_address0 = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            a_2_address0 = 64'd1;
        end else begin
            a_2_address0 = 'bx;
        end
    end else begin
        a_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        a_2_ce0 = 1'b1;
    end else begin
        a_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_2_ce1 = 1'b1;
    end else begin
        a_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            b_0_address0 = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            b_0_address0 = 64'd1;
        end else begin
            b_0_address0 = 'bx;
        end
    end else begin
        b_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        b_0_ce0 = 1'b1;
    end else begin
        b_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_0_ce1 = 1'b1;
    end else begin
        b_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            b_1_address0 = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            b_1_address0 = 64'd1;
        end else begin
            b_1_address0 = 'bx;
        end
    end else begin
        b_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        b_1_ce0 = 1'b1;
    end else begin
        b_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_1_ce1 = 1'b1;
    end else begin
        b_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            b_2_address0 = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            b_2_address0 = 64'd1;
        end else begin
            b_2_address0 = 'bx;
        end
    end else begin
        b_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        b_2_ce0 = 1'b1;
    end else begin
        b_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_2_ce1 = 1'b1;
    end else begin
        b_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        res_address0 = 64'd8;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        res_address0 = 64'd7;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_address0 = 64'd5;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_address0 = 64'd3;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        res_address0 = 64'd0;
    end else begin
        res_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        res_address1 = 64'd6;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_address1 = 64'd4;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_address1 = 64'd2;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        res_address1 = 64'd1;
    end else begin
        res_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        res_ce0 = 1'b1;
    end else begin
        res_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        res_ce1 = 1'b1;
    end else begin
        res_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        res_d0 = add_ln62_26_fu_526_p2;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        res_d0 = add_ln62_23_fu_521_p2;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_d0 = add_ln62_17_fu_511_p2;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_d0 = add_ln62_11_fu_497_p2;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        res_d0 = add_ln62_2_fu_460_p2;
    end else begin
        res_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        res_d1 = add_ln62_20_fu_516_p2;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_d1 = add_ln62_14_fu_506_p2;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_d1 = add_ln62_8_fu_492_p2;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        res_d1 = add_ln62_5_fu_465_p2;
    end else begin
        res_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        res_we0 = 1'b1;
    end else begin
        res_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        res_we1 = 1'b1;
    end else begin
        res_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_idle_pp0_1to1 == 1'b1) & (ap_start == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if (((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_0_address1 = 64'd0;

assign a_1_address1 = 64'd0;

assign a_2_address1 = 64'd0;

assign add_ln62_11_fu_497_p0 = grp_fu_587_p3;

assign add_ln62_11_fu_497_p2 = ($signed(add_ln62_11_fu_497_p0) + $signed(grp_fu_580_p3));

assign add_ln62_14_fu_506_p0 = grp_fu_601_p3;

assign add_ln62_14_fu_506_p2 = ($signed(add_ln62_14_fu_506_p0) + $signed(grp_fu_595_p3));

assign add_ln62_17_fu_511_p0 = grp_fu_614_p3;

assign add_ln62_17_fu_511_p2 = ($signed(add_ln62_17_fu_511_p0) + $signed(grp_fu_608_p3));

assign add_ln62_20_fu_516_p0 = grp_fu_628_p3;

assign add_ln62_20_fu_516_p2 = ($signed(add_ln62_20_fu_516_p0) + $signed(grp_fu_621_p3));

assign add_ln62_23_fu_521_p0 = grp_fu_643_p3;

assign add_ln62_23_fu_521_p2 = ($signed(add_ln62_23_fu_521_p0) + $signed(grp_fu_636_p3));

assign add_ln62_26_fu_526_p0 = grp_fu_657_p3;

assign add_ln62_26_fu_526_p2 = ($signed(add_ln62_26_fu_526_p0) + $signed(grp_fu_651_p3));

assign add_ln62_2_fu_460_p0 = grp_fu_539_p3;

assign add_ln62_2_fu_460_p2 = ($signed(add_ln62_2_fu_460_p0) + $signed(grp_fu_531_p3));

assign add_ln62_5_fu_465_p0 = grp_fu_556_p3;

assign add_ln62_5_fu_465_p2 = ($signed(add_ln62_5_fu_465_p0) + $signed(grp_fu_548_p3));

assign add_ln62_8_fu_492_p0 = grp_fu_572_p3;

assign add_ln62_8_fu_492_p2 = ($signed(add_ln62_8_fu_492_p0) + $signed(grp_fu_565_p3));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign b_0_address1 = 64'd0;

assign b_1_address1 = 64'd0;

assign b_2_address1 = 64'd0;

assign grp_fu_531_p1 = sext_ln62_2_fu_384_p1;

assign grp_fu_539_p1 = sext_ln62_4_fu_392_p1;

assign grp_fu_539_p2 = 16'd3;

assign grp_fu_548_p1 = sext_ln62_2_fu_384_p1;

assign grp_fu_556_p1 = sext_ln62_4_fu_392_p1;

assign grp_fu_556_p2 = 16'd3;

assign grp_fu_565_p1 = sext_ln62_2_reg_740;

assign grp_fu_572_p1 = sext_ln62_4_reg_754;

assign grp_fu_572_p2 = 16'd3;

assign grp_fu_580_p1 = sext_ln62_3_reg_747;

assign grp_fu_587_p1 = sext_ln62_5_reg_761;

assign grp_fu_587_p2 = 16'd3;

assign grp_fu_595_p0 = sext_ln62_13_reg_859;

assign grp_fu_595_p1 = sext_ln62_7_reg_779;

assign grp_fu_601_p0 = sext_ln62_14_reg_866;

assign grp_fu_601_p1 = sext_ln62_8_reg_786;

assign grp_fu_601_p2 = 16'd3;

assign grp_fu_608_p0 = sext_ln62_13_reg_859;

assign grp_fu_608_p1 = sext_ln62_10_reg_834;

assign grp_fu_614_p0 = sext_ln62_14_reg_866;

assign grp_fu_614_p1 = sext_ln62_11_reg_841;

assign grp_fu_614_p2 = 16'd3;

assign grp_fu_621_p0 = sext_ln62_16_fu_479_p1;

assign grp_fu_621_p1 = sext_ln62_3_reg_747;

assign grp_fu_628_p0 = sext_ln62_17_fu_483_p1;

assign grp_fu_628_p1 = sext_ln62_5_reg_761;

assign grp_fu_628_p2 = 16'd3;

assign grp_fu_636_p0 = sext_ln62_16_fu_479_p1;

assign grp_fu_636_p1 = sext_ln62_7_reg_779;

assign grp_fu_643_p0 = sext_ln62_17_fu_483_p1;

assign grp_fu_643_p1 = sext_ln62_8_reg_786;

assign grp_fu_643_p2 = 16'd3;

assign grp_fu_651_p0 = sext_ln62_16_reg_893;

assign grp_fu_651_p1 = sext_ln62_10_reg_834;

assign grp_fu_657_p0 = sext_ln62_17_reg_900;

assign grp_fu_657_p1 = sext_ln62_11_reg_841;

assign grp_fu_657_p2 = 16'd3;

assign mul_ln62_12_fu_452_p0 = sext_ln62_12_reg_848;

assign mul_ln62_12_fu_452_p1 = sext_ln62_6_reg_768;

assign mul_ln62_15_fu_456_p0 = sext_ln62_12_reg_848;

assign mul_ln62_15_fu_456_p1 = sext_ln62_9_reg_823;

assign mul_ln62_18_fu_474_p0 = sext_ln62_15_fu_470_p1;

assign mul_ln62_18_fu_474_p1 = sext_ln62_1_reg_729;

assign mul_ln62_21_fu_487_p0 = sext_ln62_15_fu_470_p1;

assign mul_ln62_21_fu_487_p1 = sext_ln62_6_reg_768;

assign mul_ln62_24_fu_502_p0 = sext_ln62_15_reg_883;

assign mul_ln62_24_fu_502_p1 = sext_ln62_9_reg_823;

assign mul_ln62_3_fu_404_p1 = sext_ln62_fu_370_p1;

assign mul_ln62_6_fu_422_p1 = sext_ln62_reg_724;

assign mul_ln62_9_fu_439_p1 = sext_ln62_1_reg_729;

assign mul_ln62_fu_378_p1 = sext_ln62_fu_370_p1;

assign sext_ln62_10_fu_427_p1 = $signed(b_1_q0);

assign sext_ln62_11_fu_431_p1 = $signed(b_2_q0);

assign sext_ln62_12_fu_435_p1 = reg_358;

assign sext_ln62_13_fu_444_p1 = reg_362;

assign sext_ln62_14_fu_448_p1 = reg_366;

assign sext_ln62_15_fu_470_p1 = reg_358;

assign sext_ln62_16_fu_479_p1 = reg_362;

assign sext_ln62_17_fu_483_p1 = reg_366;

assign sext_ln62_1_fu_374_p1 = $signed(b_0_q1);

assign sext_ln62_2_fu_384_p1 = $signed(a_1_q1);

assign sext_ln62_3_fu_388_p1 = $signed(b_1_q1);

assign sext_ln62_4_fu_392_p1 = $signed(a_2_q1);

assign sext_ln62_5_fu_396_p1 = $signed(b_2_q1);

assign sext_ln62_6_fu_400_p1 = $signed(b_0_q0);

assign sext_ln62_7_fu_410_p1 = $signed(b_1_q0);

assign sext_ln62_8_fu_414_p1 = $signed(b_2_q0);

assign sext_ln62_9_fu_418_p1 = $signed(b_0_q0);

assign sext_ln62_fu_370_p1 = $signed(a_0_q1);

endmodule //matrixmul
